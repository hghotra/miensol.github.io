{"componentChunkName":"component---src-templates-post-template-tsx","path":"/anchor-child-element-click/","result":{"data":{"markdownRemark":{"id":"c95b1ebb-cac9-581a-901f-8fca54bf05ba","html":"<p>I had to solve a seemingly trivial bug in an angularjs based application that turned out to be more interesting than usual.</p>\n<h2 id=\"the-bug\" style=\"position:relative;\"><a href=\"#the-bug\" aria-label=\"the bug permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The bug</h2>\n<p>The bug report stated that <em>“Clicking on a label causes page reload”</em>. That should be an easy one I thought to myself and openeded chrome inspector to see a structure of DOM. Here’s a simplified version of markup:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span>  <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ng-click</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>anchorAction($event)<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ng-controller</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>ActionCtrl<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  Anchor\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">ng-click</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>childAction($event)<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  A child\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span><span class=\"token function\">controller</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ActionCtrl'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">$scope</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  $scope<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">anchorAction</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">$event</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'anchorAction'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  $scope<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">childAction</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">$event</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    $event<span class=\"token punctuation\">.</span><span class=\"token function\">stopPropagation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'childAction'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>My intention was to have different behaviour when an anchor or a span element is clicked. Just as in the example above when <code class=\"language-text\">a</code> is clicked <code class=\"language-text\">anchorAction</code> should be printed whereas the same event triggered on <code class=\"language-text\">span</code> should <strong>only</strong> print <code class=\"language-text\">childAction</code>.\nInterestingly the actual behaviour is different.</p>\n<p>When the anchor is clicked indeed a function attached by <code class=\"language-text\">ng-click</code> is executed properly. Note that even though we <strong>did not</strong> call <code class=\"language-text\">$event.preventDefault()</code> a page reload is not triggered. This is due to <a href=\"https://github.com/angular/angular.js/blob/master/src/ng/directive/a.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">htmlAnchorDirective</code></a> provided by angularjs which effectively prevents empty <code class=\"language-text\">href</code> attribute from taking action.</p>\n<p>A click on <code class=\"language-text\">span</code> element will stop event from bubbling up document tree - thus preventing <code class=\"language-text\">anchorAction</code> from executing. In addition it will obviously print <code class=\"language-text\">childAction</code> and to my surprise <strong>it will cause a page reload</strong>.</p>\n<p>Wait a second didn’t we just prevent the event from traveling up to the anchor element? Yes. So why does the page reload anyway?</p>\n<h2 id=\"searching-for-a-root-cause\" style=\"position:relative;\"><a href=\"#searching-for-a-root-cause\" aria-label=\"searching for a root cause permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Searching for a root cause.</h2>\n<p>Almost immediately I’ve verified that calling <code class=\"language-text\">$event.preventDefault()</code> inside <code class=\"language-text\">childAction</code> fixes the problem. The fix got checked in and will be deployed soon - case closed. I was unhappy though because I didn’t understand this behaviour at all.</p>\n<p>At first I naively thought that it might be a Chrome bug - a quick check in FF and IE diminished this stupid idea.</p>\n<p>Then I thought that it may be related to angularjs in some strange manner so I’ve prepared <a href=\"http://jsfiddle.net/83ov5tgm/4/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">an example fiddle</a> that demonstrates the issue. I’ve searched for and read many answers on <a href=\"http://stackoverflow.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Stack Overflow</a> and other forums but none of them gave an in-depth explanation.</p>\n<h2 id=\"the-html-spec\" style=\"position:relative;\"><a href=\"#the-html-spec\" aria-label=\"the html spec permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The HTML spec</h2>\n<p>Since the example fiddle demonstrated same behaviour in all major desktop browsers I realised that it must be part of HTML spec - after an hour or so it turned out that it was a good  hunch.</p>\n<p>Up until now I thought that an <code class=\"language-text\">event</code> (and a <code class=\"language-text\">click</code> event in particular) default action is dependent on an element it visits when it is dispatched through a DOM tree. In the above example it would mean that since I’ve stopped <code class=\"language-text\">click</code> from bubbling up it should not reach <code class=\"language-text\">a</code> element and because of that it <strong>should not</strong> execute its default action - in our case a page reload.</p>\n<p>It turned out that my assumptions about events dispatching and elements default actions were wrong.</p>\n<p>The relevant part of the specification describes <a href=\"http://www.w3.org/html/wg/drafts/html/master/editing.html#activation\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">activation behavior</a> with an explanation of what I’ve experienced:</p>\n<blockquote>\n<ol>\n<li>Let target be the element designated by the user (the target of event).</li>\n</ol>\n</blockquote>\n<ol start=\"2\">\n<li>If target is a canvas element, run the canvas MouseEvent rerouting steps. If this changes event’s target, then let target be the new target.</li>\n<li>Set the click in progress flag on target to true.</li>\n<li><strong>Let e be the nearest activatable element of target (defined below), if any</strong>.</li>\n<li>If there is an element e, run pre-click activation steps on it.</li>\n<li><strong>Dispatch event (the required click event) at target.</strong>\nIf there is an element e and the click event is not canceled, run post-click activation steps on element e.\nIf there is an element e and the event is canceled, run canceled activation steps on element e.</li>\n<li>Set the click in progress flag on target to false.</li>\n</ol>\n<p>The most relevant steps are <em>4.</em> and <em>6.</em> as they clearly indicate that <em>target</em> and <em>nearest activatable element</em> that triggers default action can be <strong>separate</strong>. What’s left to have a complete understanding is how <em>nearest activatable element</em> is defined:</p>\n<blockquote>\n<p>Given an element target, the nearest activatable element is the element returned by the following algorithm:</p>\n</blockquote>\n<blockquote>\n<ol>\n<li>If target has a defined activation behavior, then return target and abort these steps.</li>\n<li>If target has a parent element, then set target to that parent element and return to the first step.</li>\n<li>Otherwise, there is no nearest activatable element.</li>\n</ol>\n</blockquote>\n<p>Now it is obvious why a default action of an <code class=\"language-text\">anchor</code> is executed even though a <code class=\"language-text\">click</code> event did not bubble up from its child.</p>\n<p><em>This article is cross-posted with <a href=\"http://blog.brightinventions.pl\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">my company blog</a></em></p>","fields":{"slug":"/anchor-child-element-click/","tagSlugs":["/tag/html/","/tag/javascript/"]},"excerpt":"I had to solve a seemingly trivial bug in an angularjs based application that turned out to be more interesting than usual. The bug The bug report stated that “Clicking on a label causes page reload”. That should be an easy one I thought to myself and openeded chrome inspector to see a structure of DOM. Here’s a…","frontmatter":{"date":"2015-01-25T17:00:00.000Z","description":null,"tags":["html","javascript"],"title":"Anchor child element click","socialImage":null}}},"pageContext":{"slug":"/anchor-child-element-click/"}}}