{"componentChunkName":"component---src-templates-post-template-tsx","path":"/curl-and-missing-slash/","result":{"data":{"markdownRemark":{"id":"50619364-8cb2-5f0e-81ce-6dfa0d093585","html":"<div class=\"css-full-post-content js-full-post-content\">\n  While I was playing around with <a href=\"https://github.com/miensol/proxy-mirror\" target=\"_blank\">proxy-mirror</a> I noticed an interesting behaviour when testing the proxy with <a href=\"http://en.wikipedia.org/wiki/CURL\" target=\"_blank\">curl</a>. The\n  following command:\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">curl http://wp.pl --proxy http://localhost:8888/</code></pre></div>\n<p>will result in following output when the proxy is Fiddler:</p>\n<pre style=\"font-size: 12px\">[Fiddler] Response Header parsing failed.\nResponse Data:\n&lt;plaintext&gt;\n43 6F 6E 6E 65 63 74 69 6F 6E 3A 20 63 6C 6F 73 65 0D 0A 0D 0A 3C 48 54  Connection: close....&lt;HT\n4D 4C 3E 3C 48 45 41 44 3E 3C 54 49 54 4C 45 3E 34 30 30 20 42 61 64 20  ML&gt;&lt;HEAD&gt;&lt;TITLE&gt;400 Bad\n52 65 71 75 65 73 74 3C 2F 54 49 54 4C 45 3E 3C 2F 48 45 41 44 3E 0A 3C  Request&lt;/TITLE&gt;&lt;/HEAD&gt;.&lt;\n42 4F 44 59 3E 3C 48 32 3E 34 30 30 20 42 61 64 20 52 65 71 75 65 73 74  BODY&gt;&lt;H2&gt;400 Bad Request\n3C 2F 48 32 3E 0A 59 6F 75 72 20 72 65 71 75 65 73 74 20 68 61 73 20 62  &lt;/H2&gt;.Your request has b\n61 64 20 73 79 6E 74 61 78 20 6F 72 20 69 73 20 69 6E 68 65 72 65 6E 74  ad syntax or is inherent\n6C 79 20 69 6D 70 6F 73 73 69 62 6C 65 20 74 6F 20 73 61 74 69 73 66 79  ly impossible to satisfy\n2E 0A 3C 48 52 3E 0A 3C 41 44 44 52 45 53 53 3E 3C 41 20 48 52 45 46 3D  ..&lt;HR&gt;.&lt;ADDRESS&gt;&lt;A HREF=\n22 68 74 74 70 3A 2F 2F 77 77 77 2E 77 70 2E 70 6C 2F 22 3E 61 72 69 73  \"http://www.wp.pl/\"&gt;aris\n3C 2F 41 3E 3C 2F 41 44 44 52 45 53 53 3E 0A 3C 2F 42 4F 44 59 3E 3C 2F  &lt;/A&gt;&lt;/ADDRESS&gt;.&lt;/BODY&gt;&lt;/\n48 54 4D 4C 3E 0A                                                        HTML&gt;.\n</pre>\n<p>while\na simple implementation relaying on node.js core http module and http-proxy module outputs this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">An error has occurred: {&quot;bytesParsed&quot;:0,&quot;code&quot;:&quot;HPE_INVALID_CONSTANT&quot;}</code></pre></div>\n<p>Meanwhile without the proxy parameter the actual response is:</p>\n<pre>\nHTTP/1.1 301 Moved Permanently\nServer: aris\nLocation: http://www.wp.pl\nContent-type: text/html\nContent-Length: 0\nConnection: close\n</pre>\n<h2>Curl forgiving behaviour</h2>As it turns out the actual outgoing HTTP request is different depending on the presence of <span style=\"font-family: Courier New;\">–-proxy</span> parameter. Without it the target server receives and responds with:\n<pre>\nGET / HTTP/1.1\nUser-Agent: curl/7.26.0\nHost: wp.pl\nAccept: */*\n\nHTTP/1.1 301 Moved Permanently\nServer: aris\nLocation: http://www.wp.pl\nContent-type: text/html\nContent-Length: 0\nConnection: close\n</pre>\n<p>but\nwhen the proxy setting is present:</p>\n<pre>\nGET http://wp.pl HTTP/1.1\nUser-Agent: curl/7.26.0\nHost: wp.pl\nAccept: */*\nProxy-Connection: Keep-Alive\n\nUNKNOWN 400 Bad Request\nServer: aris\nContent-Type: text/html\nDate: Sun, 23 Feb 2014 16:01:36 GMT\nLast-Modified: Sun, 23 Feb 2014 16:01:36 GMT\nAccept-Ranges: bytes\nConnection: close\n\n&lt;HTML&gt;&lt;HEAD&gt;&lt;TITLE&gt;400 Bad Request&lt;/TITLE&gt;&lt;/HEAD&gt;\n&lt;BODY&gt;&lt;H2&gt;400 Bad Request&lt;/H2&gt;\nYour request has bad syntax or is inherently impossible to satisfy.\n&lt;HR&gt;\n&lt;ADDRESS&gt;&lt;A HREF=\"http://www.wp.pl/\"&gt;aris&lt;/A&gt;&lt;/ADDRESS&gt;\n&lt;/BODY&gt;&lt;/HTML&gt;\n</pre>\n<p>As\nyou may have noticed the difference in requests (apart from additional header) is in first line – where in the first case curl assumed we want to <span style=\"font-family: Courier New;\">GET /</span>. The former uses a relative URI while the later absolute.\nNow if we change the command line just a little bit so that the address looks like <a href=\"http://wp.pl/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://wp.pl/</a> the server will receive request with correct absolute URI and will respond with 301.</p>\n  <h2>UNKNOWN Status Line</h2>Careful readers may have already noticed the <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec6.html#sec6.1\" target=\"_blank\">Status Line</a> of response returned by server is malformed. According to the spec it should have following form:\n<pre>Status-Line = HTTP-Version SP Status-Code SP Reason-Phrase CRLF\n</pre>\n<p>That’s the reason why Fiddler warns users about protocol violation and the reason of error inside node.js proxy.</p>\n  <h2>A less intrusive proxy</h2>An example described above leads to other questions about behaviour of http proxy especially if we think about implementing HTTP debugging tool like <a href=\"https://github.com/miensol/proxy-mirror\" target=\"_blank\">proxy-mirror</a>. It’s only a guess\n  but I suspect that there are other subtle differences between requests sent by client and those received by target server when the proxy is implemented using http-proxy module or core http module. I am aware of at least one such case where <a href=\"https://groups.google.com/forum/#!topic/nodejs/1aug0Jq8rYY\"\n  target=\"_blank\">HTTP Headers are lowercased</a>. If I’m right a debugging tool relaying on them would make it really hard to spot certain problems – like protocol violations on both client and server side.\n<p>In my next blog post I’ll describe how to built even less intrusive proxy without building the http parser by hand.</p>\n</div>","fields":{"slug":"/curl-and-missing-slash/","tagSlugs":["/tag/http/","/tag/node-js/","/tag/https/","/tag/proxy/"]},"excerpt":"will result in following output when the proxy is Fiddler: while\n  a simple implementation relaying on node.js core http module and http-proxy module outputs this: Meanwhile without the proxy parameter the actual response is: but\n  when the proxy setting is present: As\n  you may have noticed the difference in requests…","frontmatter":{"date":"2014-02-24 21:55:00","description":null,"tags":["http","node.js","https","proxy"],"title":"Curl and a missing slash","socialImage":null}}},"pageContext":{"slug":"/curl-and-missing-slash/"}}}