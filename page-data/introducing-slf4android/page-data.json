{"componentChunkName":"component---src-templates-post-template-tsx","path":"/introducing-slf4android/","result":{"data":{"markdownRemark":{"id":"a177e170-76d4-5283-a169-6c1bd3af37d8","html":"<p>Every now and then you have a bug that is hard to reproduce or only happens on certain phones or android versions. The thing that really comes handy in such case is a detailed application log. That’s why it’s so important to take time to add useful log entries in every non trivial part of the codebase. At the very minimum you’ll want to log any errors.</p>\n<h2 id=\"logging-frameworks\" style=\"position:relative;\"><a href=\"#logging-frameworks\" aria-label=\"logging frameworks permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Logging frameworks</h2>\n<p>That’s why it’s so important to create log entries easily. The default solution that comes with Android by means of <a href=\"http://developer.android.com/reference/android/util/Log.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">Log</code></a> is the most commonly used. However for me it’s really  the least pleasant to use:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MyTag\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Failed to download \"</span> <span class=\"token operator\">+</span> url <span class=\"token operator\">+</span>  <span class=\"token string\">\"due to occurred \"</span> <span class=\"token operator\">+</span> ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>I really don’t like that I have to specify a tag each time I need to log something. Moreover having to concatenate strings seems tedious and error prone.</p>\n<h3 id=\"logging-with-javautillogging\" style=\"position:relative;\"><a href=\"#logging-with-javautillogging\" aria-label=\"logging with javautillogging permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Logging with <code class=\"language-text\">java.util.logging</code></h3>\n<p>Another alternative that is available by default on android is packaged inside <code class=\"language-text\">java.util.logging.*</code>. And here’s an example of how to use it:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Logger</span> LOG <span class=\"token operator\">=</span> <span class=\"token class-name\">Logger</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLogger</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MyActivity</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// and then</span>\n    LOG<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Level</span><span class=\"token punctuation\">.</span>FINE<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Starting activity {0} saved instance {1}\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> savedInstanceState<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>You’re able to use <a href=\"http://developer.android.com/reference/java/text/MessageFormat.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">MessageFormatter</code></a> style to format log entries. However no variable arguments method overload makes it both harder to read and write. More importantly <strong>by default</strong> if you use above statement the message <strong>will not be printed anywhere</strong>. It’s easy to <a href=\"http://stackoverflow.com/questions/4561345/how-to-configure-java-util-logging-on-android\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">fix</a> when you know where to look for.</p>\n<h3 id=\"powerful-logback\" style=\"position:relative;\"><a href=\"#powerful-logback\" aria-label=\"powerful logback permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Powerful <code class=\"language-text\">logback</code></h3>\n<p><a href=\"http://logback.qos.ch/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">logback</a> is probably the most powerful and configurable logging framework. Among many features you can for example send an email with 50 last log entries - I’ve used it in one project, it can be a bit hard to configure but it really comes handy during testing. In order to use it on android one needs to use a ported version <a href=\"http://tony19.github.io/logback-android/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">logback-android</a>. There is one caveat though - this library is costs about 512kB - and takes about 4200 out of <a href=\"https://medium.com/@rotxed/dex-skys-the-limit-no-65k-methods-is-28e6cb40cf71\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">dex method limit</a>.</p>\n<h3 id=\"simple-android-logger\" style=\"position:relative;\"><a href=\"#simple-android-logger\" aria-label=\"simple android logger permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Simple <a href=\"https://github.com/noveogroup/android-logger\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">android-logger</a></h3>\n<p><code class=\"language-text\">android-logger</code> is a small (&#x3C;50KB) library that let’s you use slf4j api to print to logcat. It ships with various configuration options that let you change the format of output messages as well as log level based on hierarchical logger names. However you won’t be able to print messages to <a href=\"https://github.com/noveogroup/android-logger/issues/25\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">an additional file</a> and you can only <a href=\"https://github.com/noveogroup/android-logger/issues/28\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">configure the logger through properties files</a>.</p>\n<h2 id=\"slf4android\" style=\"position:relative;\"><a href=\"#slf4android\" aria-label=\"slf4android permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/bright/slf4android\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">slf4android</a></h2>\n<p>Since I wasn’t perfectly happy with above and because some design decisions made in <a href=\"https://github.com/noveogroup/android-logger\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">android-logger</a> make it not so easy to add features like logging to a file, creating custom patterns and configuring it from code I decided to create yet another logging utility.</p>\n<p>It’s a tiny wrapper around <a href=\"http://www.slf4j.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">slf4j api</a> baked by the <code class=\"language-text\">java.util.logging</code> logger mechanism. This means you can easily hook in any existing <code class=\"language-text\">java.util.logging.Handler</code> implementations.</p>\n<p>To use this little gem you’ll need to add <a href=\"http://bright.github.io/maven-repo/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">http://bright.github.io/maven-repo/</code></a> to repository list:</p>\n<div class=\"gatsby-highlight\" data-language=\"groovy\"><pre class=\"language-groovy\"><code class=\"language-groovy\">repositories <span class=\"token punctuation\">{</span>\n    maven <span class=\"token punctuation\">{</span>\n        url <span class=\"token string gstring\">\"http://bright.github.io/maven-repo/\"</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>and then declare a dependency inside a module:</p>\n<div class=\"gatsby-highlight\" data-language=\"groovy\"><pre class=\"language-groovy\"><code class=\"language-groovy\">dependencies <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pl.brightinventions:slf4android:0.0.4@aar'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      transitive <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//other dependencies</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>As with any slf4j compatible implementation using slf4android looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">HomeActivity</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Activity</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Logger</span> LOG <span class=\"token operator\">=</span> <span class=\"token class-name\">LoggerFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLogger</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HomeActivity</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSimpleName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Bundle</span> savedInstanceState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        LOG<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello from {} saved instance state {}\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> savedInstanceState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"logging-to-a-file\" style=\"position:relative;\"><a href=\"#logging-to-a-file\" aria-label=\"logging to a file permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Logging to a file</h3>\n<p>To print messages to a separate file just add:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">LoggerConfiguration</span><span class=\"token punctuation\">.</span><span class=\"token function\">configuration</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addHandlerToLogger</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">LoggerConfiguration</span><span class=\"token punctuation\">.</span><span class=\"token function\">fileLogHandler</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>inside your custom <code class=\"language-text\">android.app.Application</code> <code class=\"language-text\">onCreate</code> method. This will create rotated log files inside <code class=\"language-text\">context.getApplicationInfo().dataDir</code> with a name derived from <code class=\"language-text\">context.getPackageName()</code> and a default message pattern <code class=\"language-text\">%date %level [%thread] %name - %message%newline</code></p>\n<h3 id=\"more-features\" style=\"position:relative;\"><a href=\"#more-features\" aria-label=\"more features permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>More features</h3>\n<p><code class=\"language-text\">slf4android</code> let’s you register custom message patterns and configure logging level - although the api for that is still rough around the edges. It also features a simple (and not well tested) mechanism for error reporting that, when enabled, will display a <code class=\"language-text\">Dialog</code> prompting tester to notify developer through email whenever an error is encountered. You can enable it with:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">LoggerConfiguration</span><span class=\"token punctuation\">.</span><span class=\"token function\">configuration</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">notifyDeveloperWithLogcatDataHandler</span><span class=\"token punctuation\">(</span>applicationContext<span class=\"token punctuation\">,</span> <span class=\"token string\">\"developer.address@domain.com\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>and receive emails with attached logcat output which comes handy during development.</p>","fields":{"slug":"/introducing-slf4android/","tagSlugs":["/tag/android/"]},"excerpt":"Every now and then you have a bug that is hard to reproduce or only happens on certain phones or android versions. The thing that really comes handy in such case is a detailed application log. That’s why it’s so important to take time to add useful log entries in every non trivial part of the codebase. At the very…","frontmatter":{"date":"2014-11-01T00:00:00.000Z","description":null,"tags":["android"],"title":"Introducing slf4android - a simple slf4j implementation for android","socialImage":null}}},"pageContext":{"slug":"/introducing-slf4android/"}}}