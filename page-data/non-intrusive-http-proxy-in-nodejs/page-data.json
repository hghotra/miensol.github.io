{"componentChunkName":"component---src-templates-post-template-tsx","path":"/non-intrusive-http-proxy-in-nodejs/","result":{"data":{"markdownRemark":{"id":"abb7772a-4b5a-5b8f-b99f-c85a212280b5","html":"<p>In my previous posts I wrote about problems that might occur when\nusing http proxy written in nodejs to debug http issues.\nToday I’m going to describe how to use nodejs builtin parser to\novercome these problems.</p>\n<h2 id=\"nodejs-streams\" style=\"position:relative;\"><a href=\"#nodejs-streams\" aria-label=\"nodejs streams permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Nodejs streams</h2>\n<p>Node.js has decent support for handling streams. Especially\nthe <code class=\"language-text\">pipe</code> function takes a lot of burden away - whereas previously\nit had to be carefully handled by programmer.\nAs a first step let’s use a simple socket server and tunnel http requests\nthrough it:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> net <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'net'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> stdout <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> server <span class=\"token operator\">=</span> net<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">clientSocket</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> serverSocket <span class=\"token operator\">=</span> net<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token number\">8888</span><span class=\"token punctuation\">,</span><span class=\"token string\">'localhost'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n      clientSocket<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>serverSocket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      clientSocket<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>stdout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      serverSocket<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>clientSocket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      serverSocket<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>stdout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">9000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The above code creates a socket server listening on port <code class=\"language-text\">9000</code>.\nWhen it gets a connection from client it will immediately try to\nconnect to other server listening on port <code class=\"language-text\">8888</code> - this is a port\nused by Fiddler or Charles. After the connection is established\nit uses <code class=\"language-text\">pipe</code> function to pass all data coming in on port <code class=\"language-text\">9000</code>\nto port <code class=\"language-text\">8888</code> as well as to standard output just so we can see\nwhat data is sent from client. We also need to pass data returned\nfrom port <code class=\"language-text\">8888</code> back to client that’s why there is the second pair\nof <code class=\"language-text\">pipe</code> calls.</p>\n<p>With that we can already use <code class=\"language-text\">curl</code> to see raw http traffic written\ndirectly to standard output.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> http://wp.pl/ --proxy http://localhost:9000/</code></pre></div>\n<h2 id=\"creating-http-proxy-on-network-level\" style=\"position:relative;\"><a href=\"#creating-http-proxy-on-network-level\" aria-label=\"creating http proxy on network level permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Creating http proxy on network level</h2>\n<p>The above example albeit simple doesn’t really provide any value as\nwe still need a <em>external</em> proxy to properly pass http traffic.\nIn order to make it a <strong>real</strong> http proxy we need to add parsing logic\nthat will extract information about target server where we should pass\nincoming data too. While building a very simple http parser isn’t difficult\nwhy don’t we use existing one that is built right into node.js core http module?</p>\n<p>Using node.js http parser isn’t exactly documented and I guess it’s not\npart of public API. Nevertheless it is exposed to client code intentionally\nand a quick look through the core http module source code gives\nenough examples of how to use it. With existing parser\ninstance the only thing left to do is to extract <code class=\"language-text\">Host</code> header\nvalue, use it to connect to target server. Here is a core part\nof code required:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">net<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">socketRequest</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> requestParser <span class=\"token operator\">=</span> HttpParsingStream<span class=\"token punctuation\">.</span><span class=\"token function\">createForRequest</span><span class=\"token punctuation\">(</span>socketRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    requestParser<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'headers'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//pause the request until we setup necessary plumbing</span>\n        req<span class=\"token punctuation\">.</span><span class=\"token function\">pause</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//extract information about target server</span>\n        <span class=\"token keyword\">var</span> hostNameHeader <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">.</span>host<span class=\"token punctuation\">,</span>\n            hostAndPort <span class=\"token operator\">=</span> hostNameHeader<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">':'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            host <span class=\"token operator\">=</span> hostAndPort<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            port <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>hostAndPort<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token number\">80</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// now we now where to tunnel client request</span>\n        <span class=\"token keyword\">var</span> srvSocket <span class=\"token operator\">=</span> net<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">,</span> host<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">//a response parser as a replacement for stdout</span>\n            <span class=\"token keyword\">var</span> responseParser <span class=\"token operator\">=</span> HttpParsingStream<span class=\"token punctuation\">.</span><span class=\"token function\">createForResponse</span><span class=\"token punctuation\">(</span>srvSocket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            srvSocket<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>responseParser<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//pipe data from server to client</span>\n            srvSocket<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>socketRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">//flush data buffered in parser to target server</span>\n            requestParser<span class=\"token punctuation\">.</span><span class=\"token function\">writeCurrentChunks</span><span class=\"token punctuation\">(</span>srvSocket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//pipe remaining data from client to target server</span>\n            socketRequest<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>srvSocket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//resume processing</span>\n            req<span class=\"token punctuation\">.</span><span class=\"token function\">resume</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//pipe data from client to request parser</span>\n    socketRequest<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>requestParser<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">9000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The above code makes use of <code class=\"language-text\">HttpParsingStream</code> which is a hand\nrolled writable <code class=\"language-text\">Stream</code> that uses node.js http parser to emit\nevents. As you can see we first pipe client socket to <code class=\"language-text\">requestParser</code>\nto get information about target server. As soon as we get <code class=\"language-text\">headers</code>\nevent the incoming client request is paused, we setup connection\nto target server, write raw data buffered in <code class=\"language-text\">requestParser</code>\nand setup <code class=\"language-text\">pipe</code>s in a similar fashion as in the previous example.\nThe most important property of this http proxy is that it\n<strong>does not change</strong> data coming from client and from target server\nin any way which is invaluable when debugging problems in\nhttp implementations.</p>\n<h2 id=\"httpparsingstream-explained\" style=\"position:relative;\"><a href=\"#httpparsingstream-explained\" aria-label=\"httpparsingstream explained permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HttpParsingStream explained</h2>\n<p>The above example relies on 2 instances of <code class=\"language-text\">HttpParsingStream</code>\nfor request and response respectively:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> net <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'net'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    stream <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'stream'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    Writable <span class=\"token operator\">=</span> stream<span class=\"token punctuation\">.</span>Writable<span class=\"token punctuation\">,</span>\n    parsers <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span>parsers<span class=\"token punctuation\">,</span>\n    HTTPParser <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span><span class=\"token function\">binding</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http_parser'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>HTTPParser<span class=\"token punctuation\">,</span>\n    util <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'util'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">HttpParsingStream</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">options</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">Writable</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> socket <span class=\"token operator\">=</span> options<span class=\"token punctuation\">.</span>socket<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//get an instance of node parser</span>\n    <span class=\"token keyword\">var</span> parser <span class=\"token operator\">=</span> parsers<span class=\"token punctuation\">.</span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//buffer for raw data</span>\n    <span class=\"token keyword\">var</span> streamChunks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> that <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//initialize as request or response parser</span>\n    parser<span class=\"token punctuation\">.</span><span class=\"token function\">reinitialize</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">.</span>parserMode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    parser<span class=\"token punctuation\">.</span>socket <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">;</span>\n    socket<span class=\"token punctuation\">.</span>parser <span class=\"token operator\">=</span> parser<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//called by node http module when headers are parsed</span>\n    parser<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onIncoming</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        that<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'headers'</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        request<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">//this is one of ways to get 'end' event</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        request<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'end'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            that<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'end'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//free parser</span>\n            <span class=\"token function\">freeParser</span><span class=\"token punctuation\">(</span>parser<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    socket<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'close'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        that<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'socket.close'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">_write</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">chunk<span class=\"token punctuation\">,</span> encoding<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        streamChunks<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            chunk<span class=\"token operator\">:</span> chunk<span class=\"token punctuation\">,</span>\n            encoding<span class=\"token operator\">:</span> encoding\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//pass data to parser</span>\n        parser<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> chunk<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        callback <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//write data currently in buffer to other stream</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">writeCurrentChunks</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">writableStream</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        streamChunks<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">chunkObj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            writableStream<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>chunkObj<span class=\"token punctuation\">.</span>chunk<span class=\"token punctuation\">,</span> chunkObj<span class=\"token punctuation\">.</span>encoding<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nutil<span class=\"token punctuation\">.</span><span class=\"token function\">inherits</span><span class=\"token punctuation\">(</span>HttpParsingStream<span class=\"token punctuation\">,</span> Writable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The <code class=\"language-text\">HttpParsingStream</code> accepts 2 options:</p>\n<ul>\n<li><code class=\"language-text\">socket</code> for underlying request and response</li>\n<li><code class=\"language-text\">parserMode</code> used to properly initialise node.js http parser</li>\n</ul>\n<p>Here’s how we create objects with it:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">HttpParsingStream<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">createForRequest</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">socket</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HttpParsingStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        socket<span class=\"token operator\">:</span> socket<span class=\"token punctuation\">,</span>\n        parserMode<span class=\"token operator\">:</span> HTTPParser<span class=\"token punctuation\">.</span><span class=\"token constant\">REQUEST</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">//used only for debugging</span>\n        name<span class=\"token operator\">:</span> <span class=\"token string\">'request'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nHttpParsingStream<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">createForResponse</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">socket</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HttpParsingStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        socket<span class=\"token operator\">:</span> socket<span class=\"token punctuation\">,</span>\n        parserMode<span class=\"token operator\">:</span> HTTPParser<span class=\"token punctuation\">.</span><span class=\"token constant\">RESPONSE</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">//used only for debugging</span>\n        name<span class=\"token operator\">:</span> <span class=\"token string\">'response'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Because <code class=\"language-text\">HttpParsingStream</code> is a <code class=\"language-text\">Writable</code> stream we can\nuse it as:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">socketRequest<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>HttpParsingStream<span class=\"token punctuation\">.</span><span class=\"token function\">createForRequest</span><span class=\"token punctuation\">(</span>socketRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nserverSocket<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>HttpParsingStream<span class=\"token punctuation\">.</span><span class=\"token function\">createForResponse</span><span class=\"token punctuation\">(</span>serverSocket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>and let node.js code handle buffering, pausing and resuming.\nThere is also one additional function used to clean up and return\na parser instance back to pool - it’s a copy paste from node.js\nhttp module source code:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">freeParser</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">parser<span class=\"token punctuation\">,</span> req</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parser<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        parser<span class=\"token punctuation\">.</span>_headers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        parser<span class=\"token punctuation\">.</span>onIncoming <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parser<span class=\"token punctuation\">.</span>socket<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            parser<span class=\"token punctuation\">.</span>socket<span class=\"token punctuation\">.</span>onend <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n            parser<span class=\"token punctuation\">.</span>socket<span class=\"token punctuation\">.</span>ondata <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n            parser<span class=\"token punctuation\">.</span>socket<span class=\"token punctuation\">.</span>parser <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        parser<span class=\"token punctuation\">.</span>socket <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        parser<span class=\"token punctuation\">.</span>incoming <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        parsers<span class=\"token punctuation\">.</span><span class=\"token function\">free</span><span class=\"token punctuation\">(</span>parser<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        parser <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        req<span class=\"token punctuation\">.</span>parser <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"why-create-yet-another-http-proxy-implementation\" style=\"position:relative;\"><a href=\"#why-create-yet-another-http-proxy-implementation\" aria-label=\"why create yet another http proxy implementation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Why create yet another http proxy implementation?</h2>\n<p>proxy-mirror a simple http debugging tool that I wrote\nso far relies on an excellent http-proxy module.\nHowever because http-proxy was created to be used mostly as a\nreverse proxy to route http traffic to different http servers\nit does not provide a way to access raw tcp data. With the above\ncode I now have an easy way to access the data - so I can\ndisplay it in a byte level manner - a feature of Fiddler that\nI find handy from time to time.</p>\n<p>Moreover the target server will receive a request from client in an unchanged\nform. The same applies for response received by client.\nThis is extremely important when resolving issues related\nto improper implementations of HTTP protocol.</p>\n<p>I haven’t yet checked how the above code handles WebSocket\nconnections - I’ll explore that in a next post. For the referece\nyou can find full code in this <a href=\"https://gist.github.com/9726643\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">gist</a>.</p>","fields":{"slug":"/non-intrusive-http-proxy-in-nodejs/","tagSlugs":["/tag/nodejs/","/tag/http/","/tag/proxy/"]},"excerpt":"In my previous posts I wrote about problems that might occur when\nusing http proxy written in nodejs to debug http issues.\nToday I’m going to describe how to use nodejs builtin parser to \novercome these problems. Nodejs streams Node.js has decent support for handling streams. Especially\nthe  function takes a lot of…","frontmatter":{"date":"2014-03-23 22:14:00","description":null,"tags":["nodejs","http","proxy"],"title":"Nonintrusive http proxy in nodejs","socialImage":null}}},"pageContext":{"slug":"/non-intrusive-http-proxy-in-nodejs/"}}}