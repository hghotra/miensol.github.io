{"componentChunkName":"component---src-templates-tag-template-tsx","path":"/tag/android","result":{"data":{"site":{"siteMetadata":{"title":"Piotr Mionskowski","subtitle":"Piotr Mionskowski's thoughts on software, technology, architecture, design patterns and programming in general."}},"allMarkdownRemark":{"edges":[{"node":{"fields":{"slug":"/android-data-binding-part-2-observer-pattern-to-the-bone/","categorySlug":"/category/android/"},"excerpt":"In the previous part I’ve described typical problems we have to face when developing applications on Android. I’ve also highlighted that some of them may be mitigated when data binding API is utilized properly. It’s time to dive into more details of how this promising API works. Observer Pattern At the root of many of…","frontmatter":{"title":"Android Data Binding Part 2: Observer pattern to the bone","date":"2015-07-27 08:45","category":"android","description":null}}},{"node":{"fields":{"slug":"/android-data-binding-part-1-why-it-is-important/","categorySlug":"/category/android/"},"excerpt":"Android application code often suffers from being more verbose than it could be. As libraries such as Android Annotations and ButterKnife have shown that’s only partially due to tediousness of Java. The recently announced Android Data Binding library can remove at least part of the boilerplate code we need to write…","frontmatter":{"title":"Android Data Binding Part 1: Why it is important","date":"2015-07-20 08:36","category":"android","description":null}}},{"node":{"fields":{"slug":"/maintaining-current-user-information-in-android/","categorySlug":null},"excerpt":"Every but trivial android application needs to maintain information about current user - regardless if he has authenticated or not. While this may sound easy there are still at least handful of ways one can do it - in this article I’m going to explore couple of them. Keeping state in custom  class This technique boils…","frontmatter":{"title":"Maintaining current user information in Android","date":"2015-06-30T00:00:00.000Z","category":null,"description":null}}},{"node":{"fields":{"slug":"/lazy-apk/","categorySlug":null},"excerpt":"At Bright Inventions we use TeamCity as a continuous integration server. Apart from building, running tests and uploading artifacts we sometimes use it to quickly distribute an android application to clients and test team. However we found using TeamCity UI on a mobile device isn’t as pleasing as it could be. That’s…","frontmatter":{"title":"Lazy Apk - a simple TeamCity artifact downloader","date":"2015-01-06T21:00:00.000Z","category":null,"description":null}}},{"node":{"fields":{"slug":"/google-play-services-is-no-longer-a-monolith/","categorySlug":null},"excerpt":"Nowadays it’s getting harder and harder to build a meaningful app and not rely on Google Play Services to aid us in some commonly required features such as maps, better location provider, geo fencing and so much more. Unfortunately up until now the library shipped as a giant monolith ripping us from one third of dex…","frontmatter":{"title":"Google Play Services is no longer a giant monolith","date":"2014-12-09T10:00:00.000Z","category":null,"description":null}}},{"node":{"fields":{"slug":"/integrate-slf4j-with-crashlytics/","categorySlug":null},"excerpt":"As I mentioned in my previous post having meaningful log entries comes handy during development. When an app reaches beta testers as well as goes live it’s equally or even more important to be able to figure out why the app you’ve carefully coded isn’t behaving as it should. Testing the app on all android flavours is…","frontmatter":{"title":"Integrate slf4j with Crashlytics","date":"2014-11-20T21:00:00.000Z","category":null,"description":null}}}]}},"pageContext":{"tag":"android","currentPage":0,"postsLimit":6,"postsOffset":0,"prevPagePath":"/tag/android","nextPagePath":"/tag/android/page/1","hasPrevPage":false,"hasNextPage":true}}}